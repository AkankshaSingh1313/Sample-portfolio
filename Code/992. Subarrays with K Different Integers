class Solution {
    public int subarraysWithKDistinct(int[] nums, int k) {
        return atMostKDistinct(nums, k) - atMostKDistinct(nums, k - 1);
    }

    private int atMostKDistinct(int[] nums, int k) {
        int n = nums.length;
        Map<Integer, Integer> countMap = new HashMap<>();
        int left = 0, right = 0, distinctCount = 0, goodSubarrays = 0;

        while (right < n) {
            int num = nums[right];
            countMap.put(num, countMap.getOrDefault(num, 0) + 1);
            if (countMap.get(num) == 1) { // New unique integer found
                distinctCount++;
            }

            // Shrink the window until the number of distinct integers exceeds k
            while (distinctCount > k) {
                int leftNum = nums[left];
                countMap.put(leftNum, countMap.get(leftNum) - 1);
                if (countMap.get(leftNum) == 0) { // Remove unique integer
                    distinctCount--;
                }
                left++;
            }

            // Increment good subarrays count by the size of the window
            goodSubarrays += right - left + 1;

            right++;
        }

        return goodSubarrays;
    }
}
